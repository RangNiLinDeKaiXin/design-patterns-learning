模式要点：
    享元模式（FlyWeight）：运用共享技术有效的支持大量细粒度对象的重用。如果项目中有很多完全相同或相似的对象，则可以使用享元模式，节省内存。
享元对象能做到共享的关键就是区分了内部状态和外部状态。内部状态：可以共享，不会随环境变化而变化。外部状态：不可以共享，会随环境变化而变化

应用场景：

    比如线程池，数据库连接池，这些都利用享元模式共享了部分属性，在池中操作。

    String类的设计也是享元模式

优点：

    极大的减少内存中对象的数量相同或相似对象内存中只存在一份，极大的节约资源，提高系统性能，外部状态相对独立，不影响内部状态

缺点：

    模式较复杂，使程序逻辑复杂化，为了节省内存，共享了内部状态，分离出外部状态，而读取外部状态使运行时间变长。

参考：
    https://blog.csdn.net/qq_22075041/article/details/69802378?locationNum=7&fps=1
